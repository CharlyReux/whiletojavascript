/*
 * generated by Xtext 2.25.0
 */
package pret.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.Model");
		private final Assignment cFuncAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFuncFunctionParserRuleCall_0 = (RuleCall)cFuncAssignment.eContents().get(0);
		
		//Model:
		//    func+=(Function)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//func+=(Function)+
		public Assignment getFuncAssignment() { return cFuncAssignment; }
		
		//(Function)
		public RuleCall getFuncFunctionParserRuleCall_0() { return cFuncFunctionParserRuleCall_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFnameSYMBOLTerminalRuleCall_1_0 = (RuleCall)cFnameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFdefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFdefDefinitionParserRuleCall_3_0 = (RuleCall)cFdefAssignment_3.eContents().get(0);
		
		//Function :
		//    'function' fname=SYMBOL ':' fdef=Definition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' fname=SYMBOL ':' fdef=Definition
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//fname=SYMBOL
		public Assignment getFnameAssignment_1() { return cFnameAssignment_1; }
		
		//SYMBOL
		public RuleCall getFnameSYMBOLTerminalRuleCall_1_0() { return cFnameSYMBOLTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//fdef=Definition
		public Assignment getFdefAssignment_3() { return cFdefAssignment_3; }
		
		//Definition
		public RuleCall getFdefDefinitionParserRuleCall_3_0() { return cFdefDefinitionParserRuleCall_3_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefInputInputParserRuleCall_1_0 = (RuleCall)cDefInputAssignment_1.eContents().get(0);
		private final RuleCall cRCHARIOTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cPercentSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cRCHARIOTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cDefCommandsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefCommandsCommandsParserRuleCall_5_0 = (RuleCall)cDefCommandsAssignment_5.eContents().get(0);
		private final RuleCall cRCHARIOTTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cPercentSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cWriteKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cDefOutputAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDefOutputOutputParserRuleCall_9_0 = (RuleCall)cDefOutputAssignment_9.eContents().get(0);
		
		//Definition:
		//    'read' defInput = Input RCHARIOT* '%' RCHARIOT* defCommands = Commands RCHARIOT* '%' 'write' defOutput = Output
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' defInput = Input RCHARIOT* '%' RCHARIOT* defCommands = Commands RCHARIOT* '%' 'write' defOutput = Output
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//defInput = Input
		public Assignment getDefInputAssignment_1() { return cDefInputAssignment_1; }
		
		//Input
		public RuleCall getDefInputInputParserRuleCall_1_0() { return cDefInputInputParserRuleCall_1_0; }
		
		//RCHARIOT*
		public RuleCall getRCHARIOTTerminalRuleCall_2() { return cRCHARIOTTerminalRuleCall_2; }
		
		//'%'
		public Keyword getPercentSignKeyword_3() { return cPercentSignKeyword_3; }
		
		//RCHARIOT*
		public RuleCall getRCHARIOTTerminalRuleCall_4() { return cRCHARIOTTerminalRuleCall_4; }
		
		//defCommands = Commands
		public Assignment getDefCommandsAssignment_5() { return cDefCommandsAssignment_5; }
		
		//Commands
		public RuleCall getDefCommandsCommandsParserRuleCall_5_0() { return cDefCommandsCommandsParserRuleCall_5_0; }
		
		//RCHARIOT*
		public RuleCall getRCHARIOTTerminalRuleCall_6() { return cRCHARIOTTerminalRuleCall_6; }
		
		//'%'
		public Keyword getPercentSignKeyword_7() { return cPercentSignKeyword_7; }
		
		//'write'
		public Keyword getWriteKeyword_8() { return cWriteKeyword_8; }
		
		//defOutput = Output
		public Assignment getDefOutputAssignment_9() { return cDefOutputAssignment_9; }
		
		//Output
		public RuleCall getDefOutputOutputParserRuleCall_9_0() { return cDefOutputOutputParserRuleCall_9_0; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVaiAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVaiVARIABLETerminalRuleCall_0_0 = (RuleCall)cVaiAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVaiAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVaiVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cVaiAssignment_1_1.eContents().get(0);
		
		//Input:
		//    vai+=VARIABLE (','vai+=VARIABLE)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//vai+=VARIABLE (','vai+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//vai+=VARIABLE
		public Assignment getVaiAssignment_0() { return cVaiAssignment_0; }
		
		//VARIABLE
		public RuleCall getVaiVARIABLETerminalRuleCall_0_0() { return cVaiVARIABLETerminalRuleCall_0_0; }
		
		//(','vai+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//vai+=VARIABLE
		public Assignment getVaiAssignment_1_1() { return cVaiAssignment_1_1; }
		
		//VARIABLE
		public RuleCall getVaiVARIABLETerminalRuleCall_1_1_0() { return cVaiVARIABLETerminalRuleCall_1_1_0; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVaoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVaoVARIABLETerminalRuleCall_0_0 = (RuleCall)cVaoAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVaoAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVaoVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cVaoAssignment_1_1.eContents().get(0);
		
		//Output:
		//    vao+=VARIABLE (','vao+=VARIABLE)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//vao+=VARIABLE (','vao+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//vao+=VARIABLE
		public Assignment getVaoAssignment_0() { return cVaoAssignment_0; }
		
		//VARIABLE
		public RuleCall getVaoVARIABLETerminalRuleCall_0_0() { return cVaoVARIABLETerminalRuleCall_0_0; }
		
		//(','vao+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//vao+=VARIABLE
		public Assignment getVaoAssignment_1_1() { return cVaoAssignment_1_1; }
		
		//VARIABLE
		public RuleCall getVaoVARIABLETerminalRuleCall_1_1_0() { return cVaoVARIABLETerminalRuleCall_1_1_0; }
	}
	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.Commands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLCommandCommandParserRuleCall_0_0 = (RuleCall)cLCommandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLCommandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLCommandCommandParserRuleCall_1_1_0 = (RuleCall)cLCommandAssignment_1_1.eContents().get(0);
		
		//Commands:
		//    LCommand+=Command (';' LCommand+=Command)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LCommand+=Command (';' LCommand+=Command)*
		public Group getGroup() { return cGroup; }
		
		//LCommand+=Command
		public Assignment getLCommandAssignment_0() { return cLCommandAssignment_0; }
		
		//Command
		public RuleCall getLCommandCommandParserRuleCall_0_0() { return cLCommandCommandParserRuleCall_0_0; }
		
		//(';' LCommand+=Command)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//LCommand+=Command
		public Assignment getLCommandAssignment_1_1() { return cLCommandAssignment_1_1; }
		
		//Command
		public RuleCall getLCommandCommandParserRuleCall_1_1_0() { return cLCommandCommandParserRuleCall_1_1_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEqAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEqEqualParserRuleCall_0_0 = (RuleCall)cEqAssignment_0.eContents().get(0);
		private final Assignment cNoAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNoNopKeyword_1_0 = (Keyword)cNoAssignment_1.eContents().get(0);
		private final Assignment cIfAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIfIfParserRuleCall_2_0 = (RuleCall)cIfAssignment_2.eContents().get(0);
		private final Assignment cWhAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cWhWhileParserRuleCall_3_0 = (RuleCall)cWhAssignment_3.eContents().get(0);
		private final Assignment cFoAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cFoForParserRuleCall_4_0 = (RuleCall)cFoAssignment_4.eContents().get(0);
		private final Assignment cForeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cForeForeachParserRuleCall_5_0 = (RuleCall)cForeAssignment_5.eContents().get(0);
		
		//Command:
		//    eq=Equal| no='nop'|if=If|wh=While|fo=For|fore=Foreach
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//eq=Equal| no='nop'|if=If|wh=While|fo=For|fore=Foreach
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//eq=Equal
		public Assignment getEqAssignment_0() { return cEqAssignment_0; }
		
		//Equal
		public RuleCall getEqEqualParserRuleCall_0_0() { return cEqEqualParserRuleCall_0_0; }
		
		//no='nop'
		public Assignment getNoAssignment_1() { return cNoAssignment_1; }
		
		//'nop'
		public Keyword getNoNopKeyword_1_0() { return cNoNopKeyword_1_0; }
		
		//if=If
		public Assignment getIfAssignment_2() { return cIfAssignment_2; }
		
		//If
		public RuleCall getIfIfParserRuleCall_2_0() { return cIfIfParserRuleCall_2_0; }
		
		//wh=While
		public Assignment getWhAssignment_3() { return cWhAssignment_3; }
		
		//While
		public RuleCall getWhWhileParserRuleCall_3_0() { return cWhWhileParserRuleCall_3_0; }
		
		//fo=For
		public Assignment getFoAssignment_4() { return cFoAssignment_4; }
		
		//For
		public RuleCall getFoForParserRuleCall_4_0() { return cFoForParserRuleCall_4_0; }
		
		//fore=Foreach
		public Assignment getForeAssignment_5() { return cForeAssignment_5; }
		
		//Foreach
		public RuleCall getForeForeachParserRuleCall_5_0() { return cForeForeachParserRuleCall_5_0; }
	}
	public class EqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.Equal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsVarsParserRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExprsParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//Equal:
		//    (vars=Vars ':=' exp=Exprs)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(vars=Vars ':=' exp=Exprs)
		public Group getGroup() { return cGroup; }
		
		//vars=Vars
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }
		
		//Vars
		public RuleCall getVarsVarsParserRuleCall_0_0() { return cVarsVarsParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//exp=Exprs
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Exprs
		public RuleCall getExpExprsParserRuleCall_2_0() { return cExpExprsParserRuleCall_2_0; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIfexpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIfexpExpressionParserRuleCall_1_0 = (RuleCall)cIfexpAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cRCHARIOTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cIflcAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIflcCommandsParserRuleCall_4_0 = (RuleCall)cIflcAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cRCHARIOTTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cElseKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cEllcAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cEllcCommandsParserRuleCall_5_2_0 = (RuleCall)cEllcAssignment_5_2.eContents().get(0);
		private final RuleCall cRCHARIOTTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cFiKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//If:
		//    ('if' ifexp=Expression 'then' RCHARIOT* iflc=Commands (RCHARIOT* 'else' ellc=Commands)? RCHARIOT* 'fi')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('if' ifexp=Expression 'then' RCHARIOT* iflc=Commands (RCHARIOT* 'else' ellc=Commands)? RCHARIOT* 'fi')
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//ifexp=Expression
		public Assignment getIfexpAssignment_1() { return cIfexpAssignment_1; }
		
		//Expression
		public RuleCall getIfexpExpressionParserRuleCall_1_0() { return cIfexpExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//RCHARIOT*
		public RuleCall getRCHARIOTTerminalRuleCall_3() { return cRCHARIOTTerminalRuleCall_3; }
		
		//iflc=Commands
		public Assignment getIflcAssignment_4() { return cIflcAssignment_4; }
		
		//Commands
		public RuleCall getIflcCommandsParserRuleCall_4_0() { return cIflcCommandsParserRuleCall_4_0; }
		
		//(RCHARIOT* 'else' ellc=Commands)?
		public Group getGroup_5() { return cGroup_5; }
		
		//RCHARIOT*
		public RuleCall getRCHARIOTTerminalRuleCall_5_0() { return cRCHARIOTTerminalRuleCall_5_0; }
		
		//'else'
		public Keyword getElseKeyword_5_1() { return cElseKeyword_5_1; }
		
		//ellc=Commands
		public Assignment getEllcAssignment_5_2() { return cEllcAssignment_5_2; }
		
		//Commands
		public RuleCall getEllcCommandsParserRuleCall_5_2_0() { return cEllcCommandsParserRuleCall_5_2_0; }
		
		//RCHARIOT*
		public RuleCall getRCHARIOTTerminalRuleCall_6() { return cRCHARIOTTerminalRuleCall_6; }
		
		//'fi'
		public Keyword getFiKeyword_7() { return cFiKeyword_7; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWhexpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWhexpExpressionParserRuleCall_1_0 = (RuleCall)cWhexpAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cRCHARIOTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cWhcomAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWhcomCommandsParserRuleCall_4_0 = (RuleCall)cWhcomAssignment_4.eContents().get(0);
		private final RuleCall cRCHARIOTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cOdKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//While:
		//    ('while' whexp=Expression 'do' RCHARIOT* whcom=Commands RCHARIOT* 'od')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('while' whexp=Expression 'do' RCHARIOT* whcom=Commands RCHARIOT* 'od')
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//whexp=Expression
		public Assignment getWhexpAssignment_1() { return cWhexpAssignment_1; }
		
		//Expression
		public RuleCall getWhexpExpressionParserRuleCall_1_0() { return cWhexpExpressionParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//RCHARIOT*
		public RuleCall getRCHARIOTTerminalRuleCall_3() { return cRCHARIOTTerminalRuleCall_3; }
		
		//whcom=Commands
		public Assignment getWhcomAssignment_4() { return cWhcomAssignment_4; }
		
		//Commands
		public RuleCall getWhcomCommandsParserRuleCall_4_0() { return cWhcomCommandsParserRuleCall_4_0; }
		
		//RCHARIOT*
		public RuleCall getRCHARIOTTerminalRuleCall_5() { return cRCHARIOTTerminalRuleCall_5; }
		
		//'od'
		public Keyword getOdKeyword_6() { return cOdKeyword_6; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFoexpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFoexpExpressionParserRuleCall_1_0 = (RuleCall)cFoexpAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cRCHARIOTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cFocomAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFocomCommandsParserRuleCall_4_0 = (RuleCall)cFocomAssignment_4.eContents().get(0);
		private final RuleCall cRCHARIOTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cOdKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//For:
		//    ('for' foexp=Expression 'do' RCHARIOT* focom=Commands RCHARIOT* 'od')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('for' foexp=Expression 'do' RCHARIOT* focom=Commands RCHARIOT* 'od')
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//foexp=Expression
		public Assignment getFoexpAssignment_1() { return cFoexpAssignment_1; }
		
		//Expression
		public RuleCall getFoexpExpressionParserRuleCall_1_0() { return cFoexpExpressionParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//RCHARIOT*
		public RuleCall getRCHARIOTTerminalRuleCall_3() { return cRCHARIOTTerminalRuleCall_3; }
		
		//focom=Commands
		public Assignment getFocomAssignment_4() { return cFocomAssignment_4; }
		
		//Commands
		public RuleCall getFocomCommandsParserRuleCall_4_0() { return cFocomCommandsParserRuleCall_4_0; }
		
		//RCHARIOT*
		public RuleCall getRCHARIOTTerminalRuleCall_5() { return cRCHARIOTTerminalRuleCall_5; }
		
		//'od'
		public Keyword getOdKeyword_6() { return cOdKeyword_6; }
	}
	public class ForeachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.Foreach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cForevarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cForevarVARIABLETerminalRuleCall_1_0 = (RuleCall)cForevarAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cForeexpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cForeexpExpressionParserRuleCall_3_0 = (RuleCall)cForeexpAssignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cRCHARIOTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cForecomAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cForecomCommandsParserRuleCall_6_0 = (RuleCall)cForecomAssignment_6.eContents().get(0);
		private final RuleCall cRCHARIOTTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cOdKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Foreach:
		//    'foreach' forevar=VARIABLE 'in' foreexp=Expression 'do' RCHARIOT* forecom=Commands RCHARIOT* 'od'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' forevar=VARIABLE 'in' foreexp=Expression 'do' RCHARIOT* forecom=Commands RCHARIOT* 'od'
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//forevar=VARIABLE
		public Assignment getForevarAssignment_1() { return cForevarAssignment_1; }
		
		//VARIABLE
		public RuleCall getForevarVARIABLETerminalRuleCall_1_0() { return cForevarVARIABLETerminalRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//foreexp=Expression
		public Assignment getForeexpAssignment_3() { return cForeexpAssignment_3; }
		
		//Expression
		public RuleCall getForeexpExpressionParserRuleCall_3_0() { return cForeexpExpressionParserRuleCall_3_0; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//RCHARIOT*
		public RuleCall getRCHARIOTTerminalRuleCall_5() { return cRCHARIOTTerminalRuleCall_5; }
		
		//forecom=Commands
		public Assignment getForecomAssignment_6() { return cForecomAssignment_6; }
		
		//Commands
		public RuleCall getForecomCommandsParserRuleCall_6_0() { return cForecomCommandsParserRuleCall_6_0; }
		
		//RCHARIOT*
		public RuleCall getRCHARIOTTerminalRuleCall_7() { return cRCHARIOTTerminalRuleCall_7; }
		
		//'od'
		public Keyword getOdKeyword_8() { return cOdKeyword_8; }
	}
	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLvarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLvarsVARIABLETerminalRuleCall_0_0 = (RuleCall)cLvarsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLvarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLvarsVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cLvarsAssignment_1_1.eContents().get(0);
		
		//Vars:
		//    lvars+=VARIABLE (',' lvars+=VARIABLE)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//lvars+=VARIABLE (',' lvars+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//lvars+=VARIABLE
		public Assignment getLvarsAssignment_0() { return cLvarsAssignment_0; }
		
		//VARIABLE
		public RuleCall getLvarsVARIABLETerminalRuleCall_0_0() { return cLvarsVARIABLETerminalRuleCall_0_0; }
		
		//(',' lvars+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//lvars+=VARIABLE
		public Assignment getLvarsAssignment_1_1() { return cLvarsAssignment_1_1; }
		
		//VARIABLE
		public RuleCall getLvarsVARIABLETerminalRuleCall_1_1_0() { return cLvarsVARIABLETerminalRuleCall_1_1_0; }
	}
	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.Exprs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLexprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLexprExpressionParserRuleCall_0_0 = (RuleCall)cLexprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLexprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLexprExpressionParserRuleCall_1_1_0 = (RuleCall)cLexprAssignment_1_1.eContents().get(0);
		
		//Exprs:
		//    lexpr+=Expression (',' lexpr+=Expression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//lexpr+=Expression (',' lexpr+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//lexpr+=Expression
		public Assignment getLexprAssignment_0() { return cLexprAssignment_0; }
		
		//Expression
		public RuleCall getLexprExpressionParserRuleCall_0_0() { return cLexprExpressionParserRuleCall_0_0; }
		
		//(',' lexpr+=Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//lexpr+=Expression
		public Assignment getLexprAssignment_1_1() { return cLexprAssignment_1_1; }
		
		//Expression
		public RuleCall getLexprExpressionParserRuleCall_1_1_0() { return cLexprExpressionParserRuleCall_1_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpbgAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpbgExprBaseParserRuleCall_0_0 = (RuleCall)cExpbgAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpbdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpbdExprBaseParserRuleCall_1_1_0 = (RuleCall)cExpbdAssignment_1_1.eContents().get(0);
		
		//Expression:
		//    expbg=ExprBase ('=?' expbd=ExprBase)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//expbg=ExprBase ('=?' expbd=ExprBase)?
		public Group getGroup() { return cGroup; }
		
		//expbg=ExprBase
		public Assignment getExpbgAssignment_0() { return cExpbgAssignment_0; }
		
		//ExprBase
		public RuleCall getExpbgExprBaseParserRuleCall_0_0() { return cExpbgExprBaseParserRuleCall_0_0; }
		
		//('=?' expbd=ExprBase)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'=?'
		public Keyword getEqualsSignQuestionMarkKeyword_1_0() { return cEqualsSignQuestionMarkKeyword_1_0; }
		
		//expbd=ExprBase
		public Assignment getExpbdAssignment_1_1() { return cExpbdAssignment_1_1; }
		
		//ExprBase
		public RuleCall getExpbdExprBaseParserRuleCall_1_1_0() { return cExpbdExprBaseParserRuleCall_1_1_0; }
	}
	public class ExprBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.ExprBase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExprBaseAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNiAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNiNilKeyword_0_1_0 = (Keyword)cNiAssignment_0_1.eContents().get(0);
		private final Assignment cVAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVVARIABLETerminalRuleCall_1_0 = (RuleCall)cVAssignment_1.eContents().get(0);
		private final Assignment cSyAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSySYMBOLTerminalRuleCall_2_0 = (RuleCall)cSyAssignment_2.eContents().get(0);
		private final Assignment cEbtAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cEbtEBtlParserRuleCall_3_0 = (RuleCall)cEbtAssignment_3.eContents().get(0);
		private final Assignment cEbhAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cEbhEBhdParserRuleCall_4_0 = (RuleCall)cEbhAssignment_4.eContents().get(0);
		private final Assignment cEbcAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cEbcEBconsParserRuleCall_5_0 = (RuleCall)cEbcAssignment_5.eContents().get(0);
		private final Assignment cEblAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cEblEBlistParserRuleCall_6_0 = (RuleCall)cEblAssignment_6.eContents().get(0);
		private final Assignment cEbsAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cEbsEBsyParserRuleCall_7_0 = (RuleCall)cEbsAssignment_7.eContents().get(0);
		
		//ExprBase:
		// {ExprBase} ni='nil'|v=VARIABLE| sy=SYMBOL|ebt=EBtl|ebh=EBhd|ebc=EBcons|ebl=EBlist|ebs=EBsy
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExprBase} ni='nil'|v=VARIABLE| sy=SYMBOL|ebt=EBtl|ebh=EBhd|ebc=EBcons|ebl=EBlist|ebs=EBsy
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ExprBase} ni='nil'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ExprBase}
		public Action getExprBaseAction_0_0() { return cExprBaseAction_0_0; }
		
		//ni='nil'
		public Assignment getNiAssignment_0_1() { return cNiAssignment_0_1; }
		
		//'nil'
		public Keyword getNiNilKeyword_0_1_0() { return cNiNilKeyword_0_1_0; }
		
		//v=VARIABLE
		public Assignment getVAssignment_1() { return cVAssignment_1; }
		
		//VARIABLE
		public RuleCall getVVARIABLETerminalRuleCall_1_0() { return cVVARIABLETerminalRuleCall_1_0; }
		
		//sy=SYMBOL
		public Assignment getSyAssignment_2() { return cSyAssignment_2; }
		
		//SYMBOL
		public RuleCall getSySYMBOLTerminalRuleCall_2_0() { return cSySYMBOLTerminalRuleCall_2_0; }
		
		//ebt=EBtl
		public Assignment getEbtAssignment_3() { return cEbtAssignment_3; }
		
		//EBtl
		public RuleCall getEbtEBtlParserRuleCall_3_0() { return cEbtEBtlParserRuleCall_3_0; }
		
		//ebh=EBhd
		public Assignment getEbhAssignment_4() { return cEbhAssignment_4; }
		
		//EBhd
		public RuleCall getEbhEBhdParserRuleCall_4_0() { return cEbhEBhdParserRuleCall_4_0; }
		
		//ebc=EBcons
		public Assignment getEbcAssignment_5() { return cEbcAssignment_5; }
		
		//EBcons
		public RuleCall getEbcEBconsParserRuleCall_5_0() { return cEbcEBconsParserRuleCall_5_0; }
		
		//ebl=EBlist
		public Assignment getEblAssignment_6() { return cEblAssignment_6; }
		
		//EBlist
		public RuleCall getEblEBlistParserRuleCall_6_0() { return cEblEBlistParserRuleCall_6_0; }
		
		//ebs=EBsy
		public Assignment getEbsAssignment_7() { return cEbsAssignment_7; }
		
		//EBsy
		public RuleCall getEbsEBsyParserRuleCall_7_0() { return cEbsEBsyParserRuleCall_7_0; }
	}
	public class EBsyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.EBsy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSySYMBOLTerminalRuleCall_1_0 = (RuleCall)cSyAssignment_1.eContents().get(0);
		private final Assignment cLexpbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLexpbExprBaseParserRuleCall_2_0 = (RuleCall)cLexpbAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EBsy:'(' sy=SYMBOL lexpb+=ExprBase* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' sy=SYMBOL lexpb+=ExprBase* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//sy=SYMBOL
		public Assignment getSyAssignment_1() { return cSyAssignment_1; }
		
		//SYMBOL
		public RuleCall getSySYMBOLTerminalRuleCall_1_0() { return cSySYMBOLTerminalRuleCall_1_0; }
		
		//lexpb+=ExprBase*
		public Assignment getLexpbAssignment_2() { return cLexpbAssignment_2; }
		
		//ExprBase
		public RuleCall getLexpbExprBaseParserRuleCall_2_0() { return cLexpbExprBaseParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EBhdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.EBhd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpbExprBaseParserRuleCall_2_0 = (RuleCall)cExpbAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EBhd:'(' 'hd' expb=ExprBase')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'hd' expb=ExprBase')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'hd'
		public Keyword getHdKeyword_1() { return cHdKeyword_1; }
		
		//expb=ExprBase
		public Assignment getExpbAssignment_2() { return cExpbAssignment_2; }
		
		//ExprBase
		public RuleCall getExpbExprBaseParserRuleCall_2_0() { return cExpbExprBaseParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EBtlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.EBtl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpbExprBaseParserRuleCall_2_0 = (RuleCall)cExpbAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EBtl:'(' 'tl' expb=ExprBase')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'tl' expb=ExprBase')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'tl'
		public Keyword getTlKeyword_1() { return cTlKeyword_1; }
		
		//expb=ExprBase
		public Assignment getExpbAssignment_2() { return cExpbAssignment_2; }
		
		//ExprBase
		public RuleCall getExpbExprBaseParserRuleCall_2_0() { return cExpbExprBaseParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EBconsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.EBcons");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEBconsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cConsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLexpbAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLexpbExprBaseParserRuleCall_3_0 = (RuleCall)cLexpbAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EBcons:{EBcons} '(' 'cons' lexpb+=ExprBase* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{EBcons} '(' 'cons' lexpb+=ExprBase* ')'
		public Group getGroup() { return cGroup; }
		
		//{EBcons}
		public Action getEBconsAction_0() { return cEBconsAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'cons'
		public Keyword getConsKeyword_2() { return cConsKeyword_2; }
		
		//lexpb+=ExprBase*
		public Assignment getLexpbAssignment_3() { return cLexpbAssignment_3; }
		
		//ExprBase
		public RuleCall getLexpbExprBaseParserRuleCall_3_0() { return cLexpbExprBaseParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EBlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.EBlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEBlistAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cListKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLexpbAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLexpbExprBaseParserRuleCall_3_0 = (RuleCall)cLexpbAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EBlist:{EBlist} '(' 'list' lexpb+=ExprBase* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{EBlist} '(' 'list' lexpb+=ExprBase* ')'
		public Group getGroup() { return cGroup; }
		
		//{EBlist}
		public Action getEBlistAction_0() { return cEBlistAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'list'
		public Keyword getListKeyword_2() { return cListKeyword_2; }
		
		//lexpb+=ExprBase*
		public Assignment getLexpbAssignment_3() { return cLexpbAssignment_3; }
		
		//ExprBase
		public RuleCall getLexpbExprBaseParserRuleCall_3_0() { return cLexpbExprBaseParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.LExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLexpbAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLexpbExprBaseParserRuleCall_0_0 = (RuleCall)cLexpbAssignment_0.eContents().get(0);
		private final Assignment cLexpbAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLexpbExprBaseParserRuleCall_1_0 = (RuleCall)cLexpbAssignment_1.eContents().get(0);
		
		//LExpr:Lexpb+=ExprBase Lexpb+=ExprBase*;
		@Override public ParserRule getRule() { return rule; }
		
		//Lexpb+=ExprBase Lexpb+=ExprBase*
		public Group getGroup() { return cGroup; }
		
		//Lexpb+=ExprBase
		public Assignment getLexpbAssignment_0() { return cLexpbAssignment_0; }
		
		//ExprBase
		public RuleCall getLexpbExprBaseParserRuleCall_0_0() { return cLexpbExprBaseParserRuleCall_0_0; }
		
		//Lexpb+=ExprBase*
		public Assignment getLexpbAssignment_1() { return cLexpbAssignment_1; }
		
		//ExprBase
		public RuleCall getLexpbExprBaseParserRuleCall_1_0() { return cLexpbExprBaseParserRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final FunctionElements pFunction;
	private final DefinitionElements pDefinition;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final EqualElements pEqual;
	private final IfElements pIf;
	private final WhileElements pWhile;
	private final ForElements pFor;
	private final ForeachElements pForeach;
	private final VarsElements pVars;
	private final ExprsElements pExprs;
	private final ExpressionElements pExpression;
	private final ExprBaseElements pExprBase;
	private final EBsyElements pEBsy;
	private final EBhdElements pEBhd;
	private final EBtlElements pEBtl;
	private final EBconsElements pEBcons;
	private final EBlistElements pEBlist;
	private final LExprElements pLExpr;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tVARIABLE;
	private final TerminalRule tRCHARIOT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pFunction = new FunctionElements();
		this.pDefinition = new DefinitionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.pEqual = new EqualElements();
		this.pIf = new IfElements();
		this.pWhile = new WhileElements();
		this.pFor = new ForElements();
		this.pForeach = new ForeachElements();
		this.pVars = new VarsElements();
		this.pExprs = new ExprsElements();
		this.pExpression = new ExpressionElements();
		this.pExprBase = new ExprBaseElements();
		this.pEBsy = new EBsyElements();
		this.pEBhd = new EBhdElements();
		this.pEBtl = new EBtlElements();
		this.pEBcons = new EBconsElements();
		this.pEBlist = new EBlistElements();
		this.pLExpr = new LExprElements();
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.SYMBOL");
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.VARIABLE");
		this.tRCHARIOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "pret.MyDsl.RCHARIOT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("pret.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    func+=(Function)+
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Function :
	//    'function' fname=SYMBOL ':' fdef=Definition
	//;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Definition:
	//    'read' defInput = Input RCHARIOT* '%' RCHARIOT* defCommands = Commands RCHARIOT* '%' 'write' defOutput = Output
	//;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Input:
	//    vai+=VARIABLE (','vai+=VARIABLE)*
	//;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//    vao+=VARIABLE (','vao+=VARIABLE)*
	//;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Commands:
	//    LCommand+=Command (';' LCommand+=Command)*;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}
	
	//Command:
	//    eq=Equal| no='nop'|if=If|wh=While|fo=For|fore=Foreach
	//;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Equal:
	//    (vars=Vars ':=' exp=Exprs)
	//;
	public EqualElements getEqualAccess() {
		return pEqual;
	}
	
	public ParserRule getEqualRule() {
		return getEqualAccess().getRule();
	}
	
	//If:
	//    ('if' ifexp=Expression 'then' RCHARIOT* iflc=Commands (RCHARIOT* 'else' ellc=Commands)? RCHARIOT* 'fi')
	//;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//While:
	//    ('while' whexp=Expression 'do' RCHARIOT* whcom=Commands RCHARIOT* 'od')
	//;
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//For:
	//    ('for' foexp=Expression 'do' RCHARIOT* focom=Commands RCHARIOT* 'od')
	//;
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//Foreach:
	//    'foreach' forevar=VARIABLE 'in' foreexp=Expression 'do' RCHARIOT* forecom=Commands RCHARIOT* 'od'
	//;
	public ForeachElements getForeachAccess() {
		return pForeach;
	}
	
	public ParserRule getForeachRule() {
		return getForeachAccess().getRule();
	}
	
	//Vars:
	//    lvars+=VARIABLE (',' lvars+=VARIABLE)*
	//;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}
	
	//Exprs:
	//    lexpr+=Expression (',' lexpr+=Expression)*
	//;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}
	
	//Expression:
	//    expbg=ExprBase ('=?' expbd=ExprBase)?
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ExprBase:
	// {ExprBase} ni='nil'|v=VARIABLE| sy=SYMBOL|ebt=EBtl|ebh=EBhd|ebc=EBcons|ebl=EBlist|ebs=EBsy
	// ;
	public ExprBaseElements getExprBaseAccess() {
		return pExprBase;
	}
	
	public ParserRule getExprBaseRule() {
		return getExprBaseAccess().getRule();
	}
	
	//EBsy:'(' sy=SYMBOL lexpb+=ExprBase* ')';
	public EBsyElements getEBsyAccess() {
		return pEBsy;
	}
	
	public ParserRule getEBsyRule() {
		return getEBsyAccess().getRule();
	}
	
	//EBhd:'(' 'hd' expb=ExprBase')';
	public EBhdElements getEBhdAccess() {
		return pEBhd;
	}
	
	public ParserRule getEBhdRule() {
		return getEBhdAccess().getRule();
	}
	
	//EBtl:'(' 'tl' expb=ExprBase')';
	public EBtlElements getEBtlAccess() {
		return pEBtl;
	}
	
	public ParserRule getEBtlRule() {
		return getEBtlAccess().getRule();
	}
	
	//EBcons:{EBcons} '(' 'cons' lexpb+=ExprBase* ')';
	public EBconsElements getEBconsAccess() {
		return pEBcons;
	}
	
	public ParserRule getEBconsRule() {
		return getEBconsAccess().getRule();
	}
	
	//EBlist:{EBlist} '(' 'list' lexpb+=ExprBase* ')';
	public EBlistElements getEBlistAccess() {
		return pEBlist;
	}
	
	public ParserRule getEBlistRule() {
		return getEBlistAccess().getRule();
	}
	
	//LExpr:Lexpb+=ExprBase Lexpb+=ExprBase*;
	public LExprElements getLExprAccess() {
		return pLExpr;
	}
	
	public ParserRule getLExprRule() {
		return getLExprAccess().getRule();
	}
	
	//terminal SYMBOL:('a'..'z')(('a'..'z')|('A'..'Z')|('0'..'9'))*('!'|'?')?;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	}
	
	//terminal VARIABLE:('A'..'Z')(('a'..'z')|('A'..'Z')|('0'..'9'))*('!'|'?')?;
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal RCHARIOT:('\n');
	public TerminalRule getRCHARIOTRule() {
		return tRCHARIOT;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
