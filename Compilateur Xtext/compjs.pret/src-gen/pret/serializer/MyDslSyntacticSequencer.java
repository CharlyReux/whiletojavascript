/*
 * generated by Xtext 2.25.0
 */
package pret.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import pret.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Definition_RCHARIOTTerminalRuleCall_2_a;
	protected AbstractElementAlias match_Definition_RCHARIOTTerminalRuleCall_4_a;
	protected AbstractElementAlias match_Definition_RCHARIOTTerminalRuleCall_6_a;
	protected AbstractElementAlias match_For_RCHARIOTTerminalRuleCall_3_a;
	protected AbstractElementAlias match_For_RCHARIOTTerminalRuleCall_5_a;
	protected AbstractElementAlias match_Foreach_RCHARIOTTerminalRuleCall_5_a;
	protected AbstractElementAlias match_Foreach_RCHARIOTTerminalRuleCall_7_a;
	protected AbstractElementAlias match_If_RCHARIOTTerminalRuleCall_3_a;
	protected AbstractElementAlias match_If_RCHARIOTTerminalRuleCall_5_0_a;
	protected AbstractElementAlias match_If_RCHARIOTTerminalRuleCall_6_a;
	protected AbstractElementAlias match_While_RCHARIOTTerminalRuleCall_3_a;
	protected AbstractElementAlias match_While_RCHARIOTTerminalRuleCall_5_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_Definition_RCHARIOTTerminalRuleCall_2_a = new TokenAlias(true, true, grammarAccess.getDefinitionAccess().getRCHARIOTTerminalRuleCall_2());
		match_Definition_RCHARIOTTerminalRuleCall_4_a = new TokenAlias(true, true, grammarAccess.getDefinitionAccess().getRCHARIOTTerminalRuleCall_4());
		match_Definition_RCHARIOTTerminalRuleCall_6_a = new TokenAlias(true, true, grammarAccess.getDefinitionAccess().getRCHARIOTTerminalRuleCall_6());
		match_For_RCHARIOTTerminalRuleCall_3_a = new TokenAlias(true, true, grammarAccess.getForAccess().getRCHARIOTTerminalRuleCall_3());
		match_For_RCHARIOTTerminalRuleCall_5_a = new TokenAlias(true, true, grammarAccess.getForAccess().getRCHARIOTTerminalRuleCall_5());
		match_Foreach_RCHARIOTTerminalRuleCall_5_a = new TokenAlias(true, true, grammarAccess.getForeachAccess().getRCHARIOTTerminalRuleCall_5());
		match_Foreach_RCHARIOTTerminalRuleCall_7_a = new TokenAlias(true, true, grammarAccess.getForeachAccess().getRCHARIOTTerminalRuleCall_7());
		match_If_RCHARIOTTerminalRuleCall_3_a = new TokenAlias(true, true, grammarAccess.getIfAccess().getRCHARIOTTerminalRuleCall_3());
		match_If_RCHARIOTTerminalRuleCall_5_0_a = new TokenAlias(true, true, grammarAccess.getIfAccess().getRCHARIOTTerminalRuleCall_5_0());
		match_If_RCHARIOTTerminalRuleCall_6_a = new TokenAlias(true, true, grammarAccess.getIfAccess().getRCHARIOTTerminalRuleCall_6());
		match_While_RCHARIOTTerminalRuleCall_3_a = new TokenAlias(true, true, grammarAccess.getWhileAccess().getRCHARIOTTerminalRuleCall_3());
		match_While_RCHARIOTTerminalRuleCall_5_a = new TokenAlias(true, true, grammarAccess.getWhileAccess().getRCHARIOTTerminalRuleCall_5());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getRCHARIOTRule())
			return getRCHARIOTToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal RCHARIOT:('\n');
	 */
	protected String getRCHARIOTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\n";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Definition_RCHARIOTTerminalRuleCall_2_a.equals(syntax))
				emit_Definition_RCHARIOTTerminalRuleCall_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Definition_RCHARIOTTerminalRuleCall_4_a.equals(syntax))
				emit_Definition_RCHARIOTTerminalRuleCall_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Definition_RCHARIOTTerminalRuleCall_6_a.equals(syntax))
				emit_Definition_RCHARIOTTerminalRuleCall_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_For_RCHARIOTTerminalRuleCall_3_a.equals(syntax))
				emit_For_RCHARIOTTerminalRuleCall_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_For_RCHARIOTTerminalRuleCall_5_a.equals(syntax))
				emit_For_RCHARIOTTerminalRuleCall_5_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Foreach_RCHARIOTTerminalRuleCall_5_a.equals(syntax))
				emit_Foreach_RCHARIOTTerminalRuleCall_5_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Foreach_RCHARIOTTerminalRuleCall_7_a.equals(syntax))
				emit_Foreach_RCHARIOTTerminalRuleCall_7_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_If_RCHARIOTTerminalRuleCall_3_a.equals(syntax))
				emit_If_RCHARIOTTerminalRuleCall_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_If_RCHARIOTTerminalRuleCall_5_0_a.equals(syntax))
				emit_If_RCHARIOTTerminalRuleCall_5_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_If_RCHARIOTTerminalRuleCall_6_a.equals(syntax))
				emit_If_RCHARIOTTerminalRuleCall_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_While_RCHARIOTTerminalRuleCall_3_a.equals(syntax))
				emit_While_RCHARIOTTerminalRuleCall_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_While_RCHARIOTTerminalRuleCall_5_a.equals(syntax))
				emit_While_RCHARIOTTerminalRuleCall_5_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     RCHARIOT*
	 *
	 * This ambiguous syntax occurs at:
	 *     defInput=Input (ambiguity) '%' RCHARIOT* defCommands=Commands
	 */
	protected void emit_Definition_RCHARIOTTerminalRuleCall_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     RCHARIOT*
	 *
	 * This ambiguous syntax occurs at:
	 *     defInput=Input RCHARIOT* '%' (ambiguity) defCommands=Commands
	 */
	protected void emit_Definition_RCHARIOTTerminalRuleCall_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     RCHARIOT*
	 *
	 * This ambiguous syntax occurs at:
	 *     defCommands=Commands (ambiguity) '%' 'write' defOutput=Output
	 */
	protected void emit_Definition_RCHARIOTTerminalRuleCall_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     RCHARIOT*
	 *
	 * This ambiguous syntax occurs at:
	 *     foexp=Expression 'do' (ambiguity) focom=Commands
	 */
	protected void emit_For_RCHARIOTTerminalRuleCall_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     RCHARIOT*
	 *
	 * This ambiguous syntax occurs at:
	 *     focom=Commands (ambiguity) 'od' (rule end)
	 */
	protected void emit_For_RCHARIOTTerminalRuleCall_5_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     RCHARIOT*
	 *
	 * This ambiguous syntax occurs at:
	 *     foreexp=Expression 'do' (ambiguity) forecom=Commands
	 */
	protected void emit_Foreach_RCHARIOTTerminalRuleCall_5_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     RCHARIOT*
	 *
	 * This ambiguous syntax occurs at:
	 *     forecom=Commands (ambiguity) 'od' (rule end)
	 */
	protected void emit_Foreach_RCHARIOTTerminalRuleCall_7_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     RCHARIOT*
	 *
	 * This ambiguous syntax occurs at:
	 *     ifexp=Expression 'then' (ambiguity) iflc=Commands
	 */
	protected void emit_If_RCHARIOTTerminalRuleCall_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     RCHARIOT*
	 *
	 * This ambiguous syntax occurs at:
	 *     iflc=Commands (ambiguity) 'else' ellc=Commands
	 */
	protected void emit_If_RCHARIOTTerminalRuleCall_5_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     RCHARIOT*
	 *
	 * This ambiguous syntax occurs at:
	 *     ellc=Commands (ambiguity) 'fi' (rule end)
	 *     iflc=Commands (ambiguity) 'fi' (rule end)
	 */
	protected void emit_If_RCHARIOTTerminalRuleCall_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     RCHARIOT*
	 *
	 * This ambiguous syntax occurs at:
	 *     whexp=Expression 'do' (ambiguity) whcom=Commands
	 */
	protected void emit_While_RCHARIOTTerminalRuleCall_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     RCHARIOT*
	 *
	 * This ambiguous syntax occurs at:
	 *     whcom=Commands (ambiguity) 'od' (rule end)
	 */
	protected void emit_While_RCHARIOTTerminalRuleCall_5_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
