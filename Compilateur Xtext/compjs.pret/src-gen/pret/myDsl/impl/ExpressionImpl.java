/**
 * generated by Xtext 2.25.0
 */
package pret.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import pret.myDsl.ExprBase;
import pret.myDsl.Expression;
import pret.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link pret.myDsl.impl.ExpressionImpl#getExpbg <em>Expbg</em>}</li>
 *   <li>{@link pret.myDsl.impl.ExpressionImpl#getExpbd <em>Expbd</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends MinimalEObjectImpl.Container implements Expression
{
  /**
   * The cached value of the '{@link #getExpbg() <em>Expbg</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpbg()
   * @generated
   * @ordered
   */
  protected ExprBase expbg;

  /**
   * The cached value of the '{@link #getExpbd() <em>Expbd</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpbd()
   * @generated
   * @ordered
   */
  protected ExprBase expbd;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprBase getExpbg()
  {
    return expbg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpbg(ExprBase newExpbg, NotificationChain msgs)
  {
    ExprBase oldExpbg = expbg;
    expbg = newExpbg;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPRESSION__EXPBG, oldExpbg, newExpbg);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpbg(ExprBase newExpbg)
  {
    if (newExpbg != expbg)
    {
      NotificationChain msgs = null;
      if (expbg != null)
        msgs = ((InternalEObject)expbg).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPRESSION__EXPBG, null, msgs);
      if (newExpbg != null)
        msgs = ((InternalEObject)newExpbg).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPRESSION__EXPBG, null, msgs);
      msgs = basicSetExpbg(newExpbg, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPRESSION__EXPBG, newExpbg, newExpbg));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprBase getExpbd()
  {
    return expbd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpbd(ExprBase newExpbd, NotificationChain msgs)
  {
    ExprBase oldExpbd = expbd;
    expbd = newExpbd;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPRESSION__EXPBD, oldExpbd, newExpbd);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpbd(ExprBase newExpbd)
  {
    if (newExpbd != expbd)
    {
      NotificationChain msgs = null;
      if (expbd != null)
        msgs = ((InternalEObject)expbd).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPRESSION__EXPBD, null, msgs);
      if (newExpbd != null)
        msgs = ((InternalEObject)newExpbd).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPRESSION__EXPBD, null, msgs);
      msgs = basicSetExpbd(newExpbd, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPRESSION__EXPBD, newExpbd, newExpbd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPRESSION__EXPBG:
        return basicSetExpbg(null, msgs);
      case MyDslPackage.EXPRESSION__EXPBD:
        return basicSetExpbd(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPRESSION__EXPBG:
        return getExpbg();
      case MyDslPackage.EXPRESSION__EXPBD:
        return getExpbd();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPRESSION__EXPBG:
        setExpbg((ExprBase)newValue);
        return;
      case MyDslPackage.EXPRESSION__EXPBD:
        setExpbd((ExprBase)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPRESSION__EXPBG:
        setExpbg((ExprBase)null);
        return;
      case MyDslPackage.EXPRESSION__EXPBD:
        setExpbd((ExprBase)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPRESSION__EXPBG:
        return expbg != null;
      case MyDslPackage.EXPRESSION__EXPBD:
        return expbd != null;
    }
    return super.eIsSet(featureID);
  }

} //ExpressionImpl
