/*
 * generated by Xtext 2.25.0
 */
package pret.generator;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

import java.util.LinkedList;
import java.util.List;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;

import pret.MyDelegateGenerator;
import pret.MyDslStandaloneSetup;

public class Main {

	/***
	 * @param args0 : input (path to) file
	 * @param args1 : path to output file
	 * 
	 */
	public static void main(String[] args) {
		if (args.length == 0) {
			System.err.println("Aborting: no path to EMF resource provided!");
			return;
		}
		if (args.length == 1) {
			if (args[0].matches(".*\\.wh")) {
				Injector injector = new MyDslStandaloneSetup().createInjectorAndDoEMFRegistration();
				Main main = injector.getInstance(Main.class);
				main.runGenerator(args[0], args[0].substring(args[0].lastIndexOf('/')).split(".wh")[0] + ".js");
			} else {
				System.err.println("Aborting: source is not While format file!");
			}
		} else if (args.length == 2) {
			if (!args[0].matches(".*\\.wh")) {
				System.err.println("Aborting: source is not While format file!");
			} else {
				Injector injector = new MyDslStandaloneSetup().createInjectorAndDoEMFRegistration();
				Main main = injector.getInstance(Main.class);
				main.runGenerator(args[0], args[1]);
			}
		}
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private MyDelegateGenerator generator;

	@Inject
	private JavaIoFileSystemAccess fileAccess;

	protected void runGenerator(String string, String out) {
		// Load the resource
		ResourceSet set = resourceSetProvider.get();
		Resource resource = set.getResource(URI.createFileURI(string), true);

		// Validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				System.err.println(issue);
			}
			return;
		}

		// Configure and start the generator
		fileAccess.setOutputPath(out);
		GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);
		generator.generate(resource, fileAccess, context, out);

	}
}
