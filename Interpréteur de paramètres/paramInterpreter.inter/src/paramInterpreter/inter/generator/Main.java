/*
 * generated by Xtext 2.25.0
 */
package paramInterpreter.inter.generator;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;


import paramInterpreter.inter.MyDelegateGenerator;
import paramInterpreter.inter.MyDslStandaloneSetup;

public class Main {

/**
 * 
 * @param args[0]: nombrede param
 * @param args[1] chemin de la sortie
 * @param args[2..] arguments à interpreter
 * @throws IOException
 */
	public static void main(String[] args) throws IOException {
		Injector injector = new MyDslStandaloneSetup().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);
		main.runGenerator(args);
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private MyDelegateGenerator generator;

	@Inject
	private JavaIoFileSystemAccess fileAccess;

	protected void runGenerator(String[] arguments) throws IOException {
		//verification du nombre d'arguments(a changer pour faire comme sur le diapo du prof)TODO
		if(Integer.parseInt(arguments[0])!=(arguments.length-2)) {
			throw new RuntimeException("Le nombre d'argument de correspond pas");
		}else {
		
		
		// Configure and start the generator
		fileAccess.setOutputPath(arguments[1]);
		GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);

		// Parsing the entry parameters V1
		Injector injector = new MyDslStandaloneSetup().createInjectorAndDoEMFRegistration();
		XtextResourceSet resourceSet = injector.getInstance(XtextResourceSet.class);
		resourceSet.addLoadOption(XtextResource.OPTION_RESOLVE_ALL, Boolean.TRUE);

		Resource Argsresource = resourceSet.createResource(URI.createFileURI("./arguments.inter"));// we add the parameters
																								// to a dummy file


		
		String Sparam = "";
		for (int i = 2; i < arguments.length; i++) {

			Sparam += "In" + (i-1) + ":=" + arguments[i] + " ";

		}
		InputStream in = new ByteArrayInputStream(Sparam.getBytes());
		Argsresource.load(in, resourceSet.getLoadOptions());

		generator.generate(Argsresource, fileAccess, context);
		}
	}
}
