/*
 * generated by Xtext 2.25.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package paramInterpreter.inter.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package paramInterpreter.inter.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import paramInterpreter.inter.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getEqListeEqualParserRuleCall_0());
			}
			lv_eqListe_0_0=ruleEqual
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"eqListe",
					lv_eqListe_0_0,
					"paramInterpreter.inter.MyDsl.Equal");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleEqual
entryRuleEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualRule()); }
	iv_ruleEqual=ruleEqual
	{ $current=$iv_ruleEqual.current; }
	EOF;

// Rule Equal
ruleEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualAccess().getVarsVarsParserRuleCall_0_0());
				}
				lv_vars_0_0=ruleVars
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualRule());
					}
					set(
						$current,
						"vars",
						lv_vars_0_0,
						"paramInterpreter.inter.MyDsl.Vars");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getEqualAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualAccess().getExpExprsParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleExprs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualRule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"paramInterpreter.inter.MyDsl.Exprs");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVars
entryRuleVars returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarsRule()); }
	iv_ruleVars=ruleVars
	{ $current=$iv_ruleVars.current; }
	EOF;

// Rule Vars
ruleVars returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_lvars_0_0=RULE_VARIABLE
			{
				newLeafNode(lv_lvars_0_0, grammarAccess.getVarsAccess().getLvarsVARIABLETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVarsRule());
				}
				setWithLastConsumed(
					$current,
					"lvars",
					lv_lvars_0_0,
					"paramInterpreter.inter.MyDsl.VARIABLE");
			}
		)
	)
;

// Entry rule entryRuleExprs
entryRuleExprs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprsRule()); }
	iv_ruleExprs=ruleExprs
	{ $current=$iv_ruleExprs.current; }
	EOF;

// Rule Exprs
ruleExprs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExprsAccess().getLexprExpressionParserRuleCall_0());
			}
			lv_lexpr_0_0=ruleExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getExprsRule());
				}
				set(
					$current,
					"lexpr",
					lv_lexpr_0_0,
					"paramInterpreter.inter.MyDsl.Expression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getExpbgExprBaseParserRuleCall_0_0());
				}
				lv_expbg_0_0=ruleExprBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"expbg",
						lv_expbg_0_0,
						"paramInterpreter.inter.MyDsl.ExprBase");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='=?'
			{
				newLeafNode(otherlv_1, grammarAccess.getExpressionAccess().getEqualsSignQuestionMarkKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getExpbdExprBaseParserRuleCall_1_1_0());
					}
					lv_expbd_2_0=ruleExprBase
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"expbd",
							lv_expbd_2_0,
							"paramInterpreter.inter.MyDsl.ExprBase");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleExprBase
entryRuleExprBase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprBaseRule()); }
	iv_ruleExprBase=ruleExprBase
	{ $current=$iv_ruleExprBase.current; }
	EOF;

// Rule ExprBase
ruleExprBase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExprBaseAccess().getExprBaseAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_ni_1_0='nil'
					{
						newLeafNode(lv_ni_1_0, grammarAccess.getExprBaseAccess().getNiNilKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExprBaseRule());
						}
						setWithLastConsumed($current, "ni", lv_ni_1_0, "nil");
					}
				)
			)
		)
		    |
		(
			(
				lv_v_2_0=RULE_VARIABLE
				{
					newLeafNode(lv_v_2_0, grammarAccess.getExprBaseAccess().getVVARIABLETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExprBaseRule());
					}
					setWithLastConsumed(
						$current,
						"v",
						lv_v_2_0,
						"paramInterpreter.inter.MyDsl.VARIABLE");
				}
			)
		)
		    |
		(
			(
				lv_sy_3_0=RULE_SYMBOL
				{
					newLeafNode(lv_sy_3_0, grammarAccess.getExprBaseAccess().getSySYMBOLTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExprBaseRule());
					}
					setWithLastConsumed(
						$current,
						"sy",
						lv_sy_3_0,
						"paramInterpreter.inter.MyDsl.SYMBOL");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExprBaseAccess().getEbtEBtlParserRuleCall_3_0());
				}
				lv_ebt_4_0=ruleEBtl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprBaseRule());
					}
					set(
						$current,
						"ebt",
						lv_ebt_4_0,
						"paramInterpreter.inter.MyDsl.EBtl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExprBaseAccess().getEbhEBhdParserRuleCall_4_0());
				}
				lv_ebh_5_0=ruleEBhd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprBaseRule());
					}
					set(
						$current,
						"ebh",
						lv_ebh_5_0,
						"paramInterpreter.inter.MyDsl.EBhd");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExprBaseAccess().getEbcEBconsParserRuleCall_5_0());
				}
				lv_ebc_6_0=ruleEBcons
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprBaseRule());
					}
					set(
						$current,
						"ebc",
						lv_ebc_6_0,
						"paramInterpreter.inter.MyDsl.EBcons");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExprBaseAccess().getEblEBlistParserRuleCall_6_0());
				}
				lv_ebl_7_0=ruleEBlist
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprBaseRule());
					}
					set(
						$current,
						"ebl",
						lv_ebl_7_0,
						"paramInterpreter.inter.MyDsl.EBlist");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExprBaseAccess().getEbsEBsyParserRuleCall_7_0());
				}
				lv_ebs_8_0=ruleEBsy
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprBaseRule());
					}
					set(
						$current,
						"ebs",
						lv_ebs_8_0,
						"paramInterpreter.inter.MyDsl.EBsy");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEBsy
entryRuleEBsy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEBsyRule()); }
	iv_ruleEBsy=ruleEBsy
	{ $current=$iv_ruleEBsy.current; }
	EOF;

// Rule EBsy
ruleEBsy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getEBsyAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				lv_sy_1_0=RULE_SYMBOL
				{
					newLeafNode(lv_sy_1_0, grammarAccess.getEBsyAccess().getSySYMBOLTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEBsyRule());
					}
					setWithLastConsumed(
						$current,
						"sy",
						lv_sy_1_0,
						"paramInterpreter.inter.MyDsl.SYMBOL");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEBsyAccess().getLexpbExprBaseParserRuleCall_2_0());
				}
				lv_lexpb_2_0=ruleExprBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEBsyRule());
					}
					add(
						$current,
						"lexpb",
						lv_lexpb_2_0,
						"paramInterpreter.inter.MyDsl.ExprBase");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getEBsyAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleEBhd
entryRuleEBhd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEBhdRule()); }
	iv_ruleEBhd=ruleEBhd
	{ $current=$iv_ruleEBhd.current; }
	EOF;

// Rule EBhd
ruleEBhd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getEBhdAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='hd'
		{
			newLeafNode(otherlv_1, grammarAccess.getEBhdAccess().getHdKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEBhdAccess().getExpbExprBaseParserRuleCall_2_0());
				}
				lv_expb_2_0=ruleExprBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEBhdRule());
					}
					set(
						$current,
						"expb",
						lv_expb_2_0,
						"paramInterpreter.inter.MyDsl.ExprBase");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getEBhdAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleEBtl
entryRuleEBtl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEBtlRule()); }
	iv_ruleEBtl=ruleEBtl
	{ $current=$iv_ruleEBtl.current; }
	EOF;

// Rule EBtl
ruleEBtl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getEBtlAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='tl'
		{
			newLeafNode(otherlv_1, grammarAccess.getEBtlAccess().getTlKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEBtlAccess().getExpbExprBaseParserRuleCall_2_0());
				}
				lv_expb_2_0=ruleExprBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEBtlRule());
					}
					set(
						$current,
						"expb",
						lv_expb_2_0,
						"paramInterpreter.inter.MyDsl.ExprBase");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getEBtlAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleEBcons
entryRuleEBcons returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEBconsRule()); }
	iv_ruleEBcons=ruleEBcons
	{ $current=$iv_ruleEBcons.current; }
	EOF;

// Rule EBcons
ruleEBcons returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEBconsAccess().getEBconsAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getEBconsAccess().getLeftParenthesisKeyword_1());
		}
		otherlv_2='cons'
		{
			newLeafNode(otherlv_2, grammarAccess.getEBconsAccess().getConsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEBconsAccess().getLexpbExprBaseParserRuleCall_3_0());
				}
				lv_lexpb_3_0=ruleExprBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEBconsRule());
					}
					add(
						$current,
						"lexpb",
						lv_lexpb_3_0,
						"paramInterpreter.inter.MyDsl.ExprBase");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getEBconsAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleEBlist
entryRuleEBlist returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEBlistRule()); }
	iv_ruleEBlist=ruleEBlist
	{ $current=$iv_ruleEBlist.current; }
	EOF;

// Rule EBlist
ruleEBlist returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEBlistAccess().getEBlistAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getEBlistAccess().getLeftParenthesisKeyword_1());
		}
		otherlv_2='list'
		{
			newLeafNode(otherlv_2, grammarAccess.getEBlistAccess().getListKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEBlistAccess().getLexpbExprBaseParserRuleCall_3_0());
				}
				lv_lexpb_3_0=ruleExprBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEBlistRule());
					}
					add(
						$current,
						"lexpb",
						lv_lexpb_3_0,
						"paramInterpreter.inter.MyDsl.ExprBase");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getEBlistAccess().getRightParenthesisKeyword_4());
		}
	)
;

RULE_SYMBOL : 'a'..'z' ('a'..'z'|'A'..'Z'|'0'..'9')* ('!'|'?')?;

RULE_VARIABLE : 'A'..'Z' ('a'..'z'|'A'..'Z'|'0'..'9')* ('!'|'?')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
