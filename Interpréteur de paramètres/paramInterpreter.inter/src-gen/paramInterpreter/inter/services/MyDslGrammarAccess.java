/*
 * generated by Xtext 2.25.0
 */
package paramInterpreter.inter.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "paramInterpreter.inter.MyDsl.Model");
		private final Assignment cEqListeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEqListeEqualParserRuleCall_0 = (RuleCall)cEqListeAssignment.eContents().get(0);
		
		//Model:
		//    eqListe+=Equal*;
		@Override public ParserRule getRule() { return rule; }
		
		//eqListe+=Equal*
		public Assignment getEqListeAssignment() { return cEqListeAssignment; }
		
		//Equal
		public RuleCall getEqListeEqualParserRuleCall_0() { return cEqListeEqualParserRuleCall_0; }
	}
	public class EqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "paramInterpreter.inter.MyDsl.Equal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsVarsParserRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExprsParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//Equal:
		//    (vars=Vars ':=' exp=Exprs);
		@Override public ParserRule getRule() { return rule; }
		
		//(vars=Vars ':=' exp=Exprs)
		public Group getGroup() { return cGroup; }
		
		//vars=Vars
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }
		
		//Vars
		public RuleCall getVarsVarsParserRuleCall_0_0() { return cVarsVarsParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//exp=Exprs
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Exprs
		public RuleCall getExpExprsParserRuleCall_2_0() { return cExpExprsParserRuleCall_2_0; }
	}
	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "paramInterpreter.inter.MyDsl.Vars");
		private final Assignment cLvarsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLvarsVARIABLETerminalRuleCall_0 = (RuleCall)cLvarsAssignment.eContents().get(0);
		
		//Vars:
		//    lvars=VARIABLE;
		@Override public ParserRule getRule() { return rule; }
		
		//lvars=VARIABLE
		public Assignment getLvarsAssignment() { return cLvarsAssignment; }
		
		//VARIABLE
		public RuleCall getLvarsVARIABLETerminalRuleCall_0() { return cLvarsVARIABLETerminalRuleCall_0; }
	}
	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "paramInterpreter.inter.MyDsl.Exprs");
		private final Assignment cLexprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLexprExpressionParserRuleCall_0 = (RuleCall)cLexprAssignment.eContents().get(0);
		
		//Exprs:
		//    lexpr=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//lexpr=Expression
		public Assignment getLexprAssignment() { return cLexprAssignment; }
		
		//Expression
		public RuleCall getLexprExpressionParserRuleCall_0() { return cLexprExpressionParserRuleCall_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "paramInterpreter.inter.MyDsl.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpbgAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpbgExprBaseParserRuleCall_0_0 = (RuleCall)cExpbgAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpbdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpbdExprBaseParserRuleCall_1_1_0 = (RuleCall)cExpbdAssignment_1_1.eContents().get(0);
		
		//Expression:
		//    expbg=ExprBase ('=?' expbd=ExprBase)?;
		@Override public ParserRule getRule() { return rule; }
		
		//expbg=ExprBase ('=?' expbd=ExprBase)?
		public Group getGroup() { return cGroup; }
		
		//expbg=ExprBase
		public Assignment getExpbgAssignment_0() { return cExpbgAssignment_0; }
		
		//ExprBase
		public RuleCall getExpbgExprBaseParserRuleCall_0_0() { return cExpbgExprBaseParserRuleCall_0_0; }
		
		//('=?' expbd=ExprBase)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'=?'
		public Keyword getEqualsSignQuestionMarkKeyword_1_0() { return cEqualsSignQuestionMarkKeyword_1_0; }
		
		//expbd=ExprBase
		public Assignment getExpbdAssignment_1_1() { return cExpbdAssignment_1_1; }
		
		//ExprBase
		public RuleCall getExpbdExprBaseParserRuleCall_1_1_0() { return cExpbdExprBaseParserRuleCall_1_1_0; }
	}
	public class ExprBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "paramInterpreter.inter.MyDsl.ExprBase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExprBaseAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNiAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNiNilKeyword_0_1_0 = (Keyword)cNiAssignment_0_1.eContents().get(0);
		private final Assignment cVAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVVARIABLETerminalRuleCall_1_0 = (RuleCall)cVAssignment_1.eContents().get(0);
		private final Assignment cSyAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSySYMBOLTerminalRuleCall_2_0 = (RuleCall)cSyAssignment_2.eContents().get(0);
		private final Assignment cEbtAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cEbtEBtlParserRuleCall_3_0 = (RuleCall)cEbtAssignment_3.eContents().get(0);
		private final Assignment cEbhAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cEbhEBhdParserRuleCall_4_0 = (RuleCall)cEbhAssignment_4.eContents().get(0);
		private final Assignment cEbcAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cEbcEBconsParserRuleCall_5_0 = (RuleCall)cEbcAssignment_5.eContents().get(0);
		private final Assignment cEblAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cEblEBlistParserRuleCall_6_0 = (RuleCall)cEblAssignment_6.eContents().get(0);
		private final Assignment cEbsAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cEbsEBsyParserRuleCall_7_0 = (RuleCall)cEbsAssignment_7.eContents().get(0);
		
		//ExprBase:
		//    {ExprBase} ni='nil' | v=VARIABLE | sy=SYMBOL | ebt=EBtl | ebh=EBhd | ebc=EBcons | ebl=EBlist | ebs=EBsy;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExprBase} ni='nil' | v=VARIABLE | sy=SYMBOL | ebt=EBtl | ebh=EBhd | ebc=EBcons | ebl=EBlist | ebs=EBsy
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ExprBase} ni='nil'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ExprBase}
		public Action getExprBaseAction_0_0() { return cExprBaseAction_0_0; }
		
		//ni='nil'
		public Assignment getNiAssignment_0_1() { return cNiAssignment_0_1; }
		
		//'nil'
		public Keyword getNiNilKeyword_0_1_0() { return cNiNilKeyword_0_1_0; }
		
		//v=VARIABLE
		public Assignment getVAssignment_1() { return cVAssignment_1; }
		
		//VARIABLE
		public RuleCall getVVARIABLETerminalRuleCall_1_0() { return cVVARIABLETerminalRuleCall_1_0; }
		
		//sy=SYMBOL
		public Assignment getSyAssignment_2() { return cSyAssignment_2; }
		
		//SYMBOL
		public RuleCall getSySYMBOLTerminalRuleCall_2_0() { return cSySYMBOLTerminalRuleCall_2_0; }
		
		//ebt=EBtl
		public Assignment getEbtAssignment_3() { return cEbtAssignment_3; }
		
		//EBtl
		public RuleCall getEbtEBtlParserRuleCall_3_0() { return cEbtEBtlParserRuleCall_3_0; }
		
		//ebh=EBhd
		public Assignment getEbhAssignment_4() { return cEbhAssignment_4; }
		
		//EBhd
		public RuleCall getEbhEBhdParserRuleCall_4_0() { return cEbhEBhdParserRuleCall_4_0; }
		
		//ebc=EBcons
		public Assignment getEbcAssignment_5() { return cEbcAssignment_5; }
		
		//EBcons
		public RuleCall getEbcEBconsParserRuleCall_5_0() { return cEbcEBconsParserRuleCall_5_0; }
		
		//ebl=EBlist
		public Assignment getEblAssignment_6() { return cEblAssignment_6; }
		
		//EBlist
		public RuleCall getEblEBlistParserRuleCall_6_0() { return cEblEBlistParserRuleCall_6_0; }
		
		//ebs=EBsy
		public Assignment getEbsAssignment_7() { return cEbsAssignment_7; }
		
		//EBsy
		public RuleCall getEbsEBsyParserRuleCall_7_0() { return cEbsEBsyParserRuleCall_7_0; }
	}
	public class EBsyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "paramInterpreter.inter.MyDsl.EBsy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSySYMBOLTerminalRuleCall_1_0 = (RuleCall)cSyAssignment_1.eContents().get(0);
		private final Assignment cLexpbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLexpbExprBaseParserRuleCall_2_0 = (RuleCall)cLexpbAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EBsy:
		//    '(' sy=SYMBOL lexpb+=ExprBase* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' sy=SYMBOL lexpb+=ExprBase* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//sy=SYMBOL
		public Assignment getSyAssignment_1() { return cSyAssignment_1; }
		
		//SYMBOL
		public RuleCall getSySYMBOLTerminalRuleCall_1_0() { return cSySYMBOLTerminalRuleCall_1_0; }
		
		//lexpb+=ExprBase*
		public Assignment getLexpbAssignment_2() { return cLexpbAssignment_2; }
		
		//ExprBase
		public RuleCall getLexpbExprBaseParserRuleCall_2_0() { return cLexpbExprBaseParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EBhdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "paramInterpreter.inter.MyDsl.EBhd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpbExprBaseParserRuleCall_2_0 = (RuleCall)cExpbAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EBhd:
		//    '(' 'hd' expb=ExprBase ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'hd' expb=ExprBase ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'hd'
		public Keyword getHdKeyword_1() { return cHdKeyword_1; }
		
		//expb=ExprBase
		public Assignment getExpbAssignment_2() { return cExpbAssignment_2; }
		
		//ExprBase
		public RuleCall getExpbExprBaseParserRuleCall_2_0() { return cExpbExprBaseParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EBtlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "paramInterpreter.inter.MyDsl.EBtl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpbExprBaseParserRuleCall_2_0 = (RuleCall)cExpbAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EBtl:
		//    '(' 'tl' expb=ExprBase ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'tl' expb=ExprBase ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'tl'
		public Keyword getTlKeyword_1() { return cTlKeyword_1; }
		
		//expb=ExprBase
		public Assignment getExpbAssignment_2() { return cExpbAssignment_2; }
		
		//ExprBase
		public RuleCall getExpbExprBaseParserRuleCall_2_0() { return cExpbExprBaseParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EBconsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "paramInterpreter.inter.MyDsl.EBcons");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEBconsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cConsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLexpbAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLexpbExprBaseParserRuleCall_3_0 = (RuleCall)cLexpbAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EBcons:
		//    {EBcons} '(' 'cons' lexpb+=ExprBase* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{EBcons} '(' 'cons' lexpb+=ExprBase* ')'
		public Group getGroup() { return cGroup; }
		
		//{EBcons}
		public Action getEBconsAction_0() { return cEBconsAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'cons'
		public Keyword getConsKeyword_2() { return cConsKeyword_2; }
		
		//lexpb+=ExprBase*
		public Assignment getLexpbAssignment_3() { return cLexpbAssignment_3; }
		
		//ExprBase
		public RuleCall getLexpbExprBaseParserRuleCall_3_0() { return cLexpbExprBaseParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EBlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "paramInterpreter.inter.MyDsl.EBlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEBlistAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cListKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLexpbAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLexpbExprBaseParserRuleCall_3_0 = (RuleCall)cLexpbAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EBlist:
		//    {EBlist} '(' 'list' lexpb+=ExprBase* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{EBlist} '(' 'list' lexpb+=ExprBase* ')'
		public Group getGroup() { return cGroup; }
		
		//{EBlist}
		public Action getEBlistAction_0() { return cEBlistAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'list'
		public Keyword getListKeyword_2() { return cListKeyword_2; }
		
		//lexpb+=ExprBase*
		public Assignment getLexpbAssignment_3() { return cLexpbAssignment_3; }
		
		//ExprBase
		public RuleCall getLexpbExprBaseParserRuleCall_3_0() { return cLexpbExprBaseParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	private final ModelElements pModel;
	private final EqualElements pEqual;
	private final VarsElements pVars;
	private final ExprsElements pExprs;
	private final ExpressionElements pExpression;
	private final ExprBaseElements pExprBase;
	private final EBsyElements pEBsy;
	private final EBhdElements pEBhd;
	private final EBtlElements pEBtl;
	private final EBconsElements pEBcons;
	private final EBlistElements pEBlist;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tVARIABLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pEqual = new EqualElements();
		this.pVars = new VarsElements();
		this.pExprs = new ExprsElements();
		this.pExpression = new ExpressionElements();
		this.pExprBase = new ExprBaseElements();
		this.pEBsy = new EBsyElements();
		this.pEBhd = new EBhdElements();
		this.pEBtl = new EBtlElements();
		this.pEBcons = new EBconsElements();
		this.pEBlist = new EBlistElements();
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "paramInterpreter.inter.MyDsl.SYMBOL");
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "paramInterpreter.inter.MyDsl.VARIABLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("paramInterpreter.inter.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    eqListe+=Equal*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Equal:
	//    (vars=Vars ':=' exp=Exprs);
	public EqualElements getEqualAccess() {
		return pEqual;
	}
	
	public ParserRule getEqualRule() {
		return getEqualAccess().getRule();
	}
	
	//Vars:
	//    lvars=VARIABLE;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}
	
	//Exprs:
	//    lexpr=Expression;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}
	
	//Expression:
	//    expbg=ExprBase ('=?' expbd=ExprBase)?;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ExprBase:
	//    {ExprBase} ni='nil' | v=VARIABLE | sy=SYMBOL | ebt=EBtl | ebh=EBhd | ebc=EBcons | ebl=EBlist | ebs=EBsy;
	public ExprBaseElements getExprBaseAccess() {
		return pExprBase;
	}
	
	public ParserRule getExprBaseRule() {
		return getExprBaseAccess().getRule();
	}
	
	//EBsy:
	//    '(' sy=SYMBOL lexpb+=ExprBase* ')';
	public EBsyElements getEBsyAccess() {
		return pEBsy;
	}
	
	public ParserRule getEBsyRule() {
		return getEBsyAccess().getRule();
	}
	
	//EBhd:
	//    '(' 'hd' expb=ExprBase ')';
	public EBhdElements getEBhdAccess() {
		return pEBhd;
	}
	
	public ParserRule getEBhdRule() {
		return getEBhdAccess().getRule();
	}
	
	//EBtl:
	//    '(' 'tl' expb=ExprBase ')';
	public EBtlElements getEBtlAccess() {
		return pEBtl;
	}
	
	public ParserRule getEBtlRule() {
		return getEBtlAccess().getRule();
	}
	
	//EBcons:
	//    {EBcons} '(' 'cons' lexpb+=ExprBase* ')';
	public EBconsElements getEBconsAccess() {
		return pEBcons;
	}
	
	public ParserRule getEBconsRule() {
		return getEBconsAccess().getRule();
	}
	
	//EBlist:
	//    {EBlist} '(' 'list' lexpb+=ExprBase* ')';
	public EBlistElements getEBlistAccess() {
		return pEBlist;
	}
	
	public ParserRule getEBlistRule() {
		return getEBlistAccess().getRule();
	}
	
	//terminal SYMBOL:
	//    ('a'..'z') (('a'..'z') | ('A'..'Z') | ('0'..'9'))* ('!' | '?')?;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	}
	
	//terminal VARIABLE:
	//    ('A'..'Z') (('a'..'z') | ('A'..'Z') | ('0'..'9'))* ('!' | '?')?;
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
